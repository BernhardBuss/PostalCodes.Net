<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#
    var filesForCountries = new Dictionary<string, string[]>{
         { "4Digits.json", new [] { "AT", "AU", "BG", "CH", "DK", "HU", "NO", "SI", "NZ", "BE", "CY" }},
         { "5Digits.json", new [] { "DE","CZ","EE","ES","FI","FR","GR","IT","SE","SK","TR","US","PR","VI","AS","GU","MP","PW","FM","MH","MY","HR","MX" }},
         { "6Digits.json", new [] { "IN", "SG" }},
         { "7Digits.json", new [] { "JP" }}
    };

    var js = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var countryList = new HashSet<CountryInfo>();

    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    foreach(var fileType in filesForCountries)
    {
    	foreach(var countryCode in fileType.Value)
    	{
   	       	var ci = js.Deserialize<CountryInfo>(File.ReadAllText(Path.Combine(templateDirectory, "../../countries", fileType.Key)));  
   			ci.CountryCodeAlpha2 = countryCode; 	
   			ci.CountryName = countryCode; 	  
    		countryList.Add( ci );
    	}
    }	

    var jsonFiles = Directory.GetFiles(Path.Combine(templateDirectory, "../../countries/")).Where(a => a.EndsWith(".json"));
    var regex = new Regex(@"^([A-Z]{2})\.json$");
    foreach (var jsonFile in jsonFiles)
    {
   		
    	var match = regex.Match(Path.GetFileName(jsonFile));
    	if (match.Success)
    	{
    	   var ci = js.Deserialize<CountryInfo>(File.ReadAllText(jsonFile));  
    	   countryList.Add( ci );
    	} 
    } 

    var countrySortedList = countryList.OrderBy(a => a.CountryCodeAlpha2).ToList();
	foreach(var countryInfo in countryList) 
    {
        GeneratePostalCodeFile(countryInfo);
    	SaveOutput(countryInfo.CountryCodeAlpha2 + "PostalCode.gen.cs");

    	GeneratePostalCodeFileUnitTests(countryInfo);
    	SaveOutput(Path.Combine("../../PostalCodes.UnitTests/Generated", countryInfo.CountryCodeAlpha2 + "PostalCodeTests.gen.cs"));
    } 
#>
using System;
using PostalCodes.GenericPostalCodes;

namespace PostalCodes
{
    /// <summary>
    /// Factory implementation for PostalCode
    /// </summary>
    public class PostalCodeFactory
    {
        private static readonly Lazy<PostalCodeFactory> LazyFactory = new Lazy<PostalCodeFactory>(() => new PostalCodeFactory());

        internal PostalCodeFactory()
        {
        }

        /// <summary>
        /// Gets an instance of PostalCodeFactory
        /// </summary>
        public static PostalCodeFactory Instance
        {
            get { return LazyFactory.Value; }
        }

        /// <summary>
        /// Creates a PostalCode object using the provided Country and postal code
        /// </summary>
        /// <param name="country">Country associated with the provided postal code</param>
        /// <param name="postalCode">Postal code value</param>
        /// <returns>A PostalCode representing the provided values</returns>
        public PostalCode CreatePostalCode(Country country, string postalCode)
        {
            if (postalCode == null)
            {
                return null;
            }

            switch(country.Code) {
<#
    foreach(var countryInfo in countryList) 
    {
#>
				case "<#= countryInfo.CountryCodeAlpha2 #>" :
   					return new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCode);
<#
    }
#>
            }

            // Default behavior so far was to just return NumericPostalCode
            return new DefaultPostalCode(postalCode);
        }
    }
}


<#+
    public class TestData {
    	public List<string> Max { get; set; }
		public List<string> Min { get; set; }
		public List<string> Valid { get; set; }
		public List<string> Invalid { get; set; }
		public Dictionary<string, string> Predecessor {get; set;}
		public Dictionary<string, string> Successor {get; set;}
    }

	public class CountryInfo {
		public string CountryCodeAlpha2 { get; set; }
		public string CountryName { get; set; }
		public string WhiteSpaceCharacters { get; set; }

		public List<Dictionary<string, string>> Formats { get; set; }

		public TestData TestData { get; set; }

		public override int GetHashCode()
		{
			return CountryCodeAlpha2.GetHashCode();	
		}
		public override bool Equals(object o)
		{
			return CountryCodeAlpha2.Equals( ((CountryInfo) o).CountryCodeAlpha2);
		}
	}

  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }

  void GeneratePropertyInitializeIfPresent(IDictionary<string, string> format, string propertyName, string formatting)
  {
	if (format.ContainsKey(propertyName) && !string.IsNullOrEmpty(format[propertyName]))
	{
#>
                <#= propertyName #> = <#= string.Format(formatting, format[propertyName]) #>,
<#+
	}
  }
   
  void GeneratePostalCodeFile(CountryInfo countryInfo)
  {
#>
using System.Text.RegularExpressions;
using PostalCodes.GenericPostalCodes;

namespace PostalCodes
{
    internal partial class <#= countryInfo.CountryCodeAlpha2 #>PostalCode : AlphaNumericPostalCode
    {
        public <#= countryInfo.CountryCodeAlpha2 #>PostalCode(string postalCode) : this(postalCode, true) {}

        public <#= countryInfo.CountryCodeAlpha2 #>PostalCode(string postalCode, bool allowConvertToShort) : base(_formats, postalCode, allowConvertToShort) 
        {
            _countryName = "<#= countryInfo.CountryName #>";
        }
        
        protected override PostalCode CreatePostalCode(string code, bool allowConvertToShort)
        {
            return new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code, allowConvertToShort);
        }
        
        public override bool Equals (object obj)
        {
            var other = obj as <#= countryInfo.CountryCodeAlpha2 #>PostalCode;
            if (other == null) 
            {
                return false;
            }

            return PostalCodeString.Equals (other.PostalCodeString);
        }

        public override int GetHashCode ()
        {
            return PostalCodeString.GetHashCode ();
        }

        private static PostalCodeFormat[] _formats = {
<#+ 
	for(int i=0; i < countryInfo.Formats.Count; i++)
	{
	    var format = countryInfo.Formats[i];
	    var putComma = (i != countryInfo.Formats.Count-1);
#>
            new PostalCodeFormat {
<#+
		GeneratePropertyInitializeIfPresent(format, "Name", "\"{0}\"");
		GeneratePropertyInitializeIfPresent(format, "RegexDefault", "new Regex(\"{0}\", RegexOptions.Compiled)");
		GeneratePropertyInitializeIfPresent(format, "RegexShort", "new Regex(\"{0}\", RegexOptions.Compiled)");
		GeneratePropertyInitializeIfPresent(format, "OutputDefault", "\"{0}\"");
		GeneratePropertyInitializeIfPresent(format, "OutputShort", "\"{0}\"");
		GeneratePropertyInitializeIfPresent(format, "AutoConvertToShort", "{0}");
		GeneratePropertyInitializeIfPresent(format, "ShortExpansionAsLowestInRange", "\"{0}\"");
		GeneratePropertyInitializeIfPresent(format, "ShortExpansionAsHighestInRange", "\"{0}\"");
		GeneratePropertyInitializeIfPresent(format, "LeftPaddingCharacter", "\"{0}\"");
#>
            }<#+ if (putComma) { #>,
<#+ } #>
<#+
    }
#>

        };
    }
}
<#+
   }  

  void GeneratePostalCodeFileUnitTests(CountryInfo countryInfo)
  {
#>
using System;
using NUnit.Framework;

namespace PostalCodes.UnitTests.Generated
{
    [TestFixture]
    internal class <#= countryInfo.CountryCodeAlpha2 #>PostalCodeTests
    {

<#+
       foreach(var testCase in countryInfo.TestData.Predecessor)
       {
#>
        [TestCase("<#= testCase.Key #>","<#= testCase.Value #>")]
<#+
       }
#>
        public void Predecessor_ValidInput_ReturnsCorrectPostalCode(string postalCode, string postalCodePredecessor)
        {
            var code = new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCode);
            var codePredecessor = new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCodePredecessor);
            Assert.AreEqual(codePredecessor, code.Predecessor);
            Assert.AreEqual(codePredecessor.ToString(), code.Predecessor.ToString());
            Assert.AreEqual(codePredecessor.ToHumanReadableString(), code.Predecessor.ToHumanReadableString());
        }

<#+
       foreach(var testCase in countryInfo.TestData.Successor)
       {
#>
        [TestCase("<#= testCase.Key #>","<#= testCase.Value #>")]
<#+
       }
#>
        public void Successor_ValidInput_ReturnsCorrectPostalCode(string postalCode, string postalCodeSuccessor)
        {
            var code = new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCode);
            var codeSuccessor = new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCodeSuccessor);
            Assert.AreEqual(codeSuccessor, code.Successor);
            Assert.AreEqual(codeSuccessor.ToString(), code.Successor.ToString());
            Assert.AreEqual(codeSuccessor.ToHumanReadableString(), code.Successor.ToHumanReadableString());

        }
        
<#+
       foreach(var testCase in countryInfo.TestData.Min)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void Predecessor_FirstInRange_ReturnsNull(string postalCode)
        {
            Assert.IsNull((new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCode)).Predecessor);
        }

<#+
       foreach(var testCase in countryInfo.TestData.Max)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void Successor_LastInRange_ReturnsNull(string postalCode)
        {
            Assert.IsNull((new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCode)).Successor);
        }

<#+
       foreach(var testCase in countryInfo.TestData.Invalid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void InvalidCode_ThrowsArgumentException(string postalCode)
        {
            Assert.Throws<ArgumentException>(() => new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(postalCode));
        }

<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void Equals_WithNull_DoesntThrowAndReturnsFalse(string code)
        {
            var x = (new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code)).Predecessor;
            bool result = true;
            TestDelegate equals = () => result = x.Equals(null);
            Assert.DoesNotThrow(equals);
            Assert.IsFalse(result);
        }
<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void Equals_WithOtherObject_DoesntThrowAndReturnsFalse(string code)
        {
            var x = (new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code)).Predecessor;
            bool result = true;
            TestDelegate equals = () => result = x.Equals(new object());
            Assert.DoesNotThrow(equals);
            Assert.IsFalse(result);
        }
        
<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void Predecessor_ValidInput_ReturnsCorrectPostalCodeObject(string code)
        {
            var x = (new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code)).Predecessor;
            Assert.IsTrue(x.GetType() == typeof(<#= countryInfo.CountryCodeAlpha2 #>PostalCode));
        }

<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void Successor_ValidInput_ReturnsCorrectPostalCodeObject(string code)
        {
            var x = (new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code)).Successor;
            Assert.IsTrue(x.GetType() == typeof(<#= countryInfo.CountryCodeAlpha2 #>PostalCode));
        }

<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void ExpandPostalCodeAsHighestInRange_ValidInput_ReturnsCorrectPostalCodeObject(string code)
        {
            var x = (new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code)).ExpandPostalCodeAsHighestInRange();
            Assert.IsTrue(x.GetType() == typeof(<#= countryInfo.CountryCodeAlpha2 #>PostalCode));
        }

<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void ExpandPostalCodeAsLowestInRange_ValidInput_ReturnsCorrectPostalCodeObject(string code)
        {
            var x = (new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code)).ExpandPostalCodeAsLowestInRange();
            Assert.IsTrue(x.GetType() == typeof(<#= countryInfo.CountryCodeAlpha2 #>PostalCode));
        }

<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void GetHashCode_WithEqualObject_EqualHashes(string code)
        {
            var x = new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code);
            var y = new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code);
            Assert.IsTrue(x.GetHashCode() == y.GetHashCode());
        }

<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void AreAdjacent_WithAdjacentPostalCodes_ReturnsTrue(string code)
        {
            var x = new <#= countryInfo.CountryCodeAlpha2 #>PostalCode(code);
            var xPred = x.Predecessor;
            var xSucc = x.Successor;
            Assert.IsTrue(PostalCode.AreAdjacent(x, xPred));
            Assert.IsTrue(PostalCode.AreAdjacent(xPred, x));
            Assert.IsTrue(PostalCode.AreAdjacent(x, xSucc));
            Assert.IsTrue(PostalCode.AreAdjacent(xSucc, x));
            Assert.IsFalse(PostalCode.AreAdjacent(xPred, xSucc));
        }             

<#+
       foreach(var testCase in countryInfo.TestData.Valid)
       {
#>
        [TestCase("<#= testCase #>")]
<#+
       }
#>
        public void CreateThroughFactoryIsSuccessful(string code)
        {
            var country = CountryFactory.Instance.CreateCountry("<#= countryInfo.CountryCodeAlpha2 #>");
            var x = PostalCodeFactory.Instance.CreatePostalCode(country, code);
            
            Assert.IsTrue(x.GetType() == typeof(<#= countryInfo.CountryCodeAlpha2 #>PostalCode));
        }             

    }
}
<#+
  }
#>